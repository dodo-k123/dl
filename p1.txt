1.  Linear regression with keras

from keras.models import Sequential
from keras.layers import Dense 
from keras.optimizers import Adam, SGD
import matplotlib.pyplot as plt
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O
df=pd.read_csv("/content/weight-height.csv")
df
X=df[['Height']].values#input
y_true=df[['Weight']].values#output
model = Sequential()#building sequential model
model.add(Dense(1, input_shape=(1,)))#dense layer connection
model.summary()
model.compile(Adam(lr=0.8), 'mean_squared_error')#compiling model
model.fit(X,y_true, epochs=10, batch_size=100)#building model with continous training
y_pred= model.predict(X)#predicting value
#plotting graph and visualizing
df.plot(
       x='Height',
       y='Weight', title='Weight and Height in adults')
plt.plot(X, y_pred, color='black', linewidth=3)
model.evaluate(y_true,y_pred)# evaluating the model

----------------------------------------------------------------------------------------------------------------------------------------------------

2. Softmaz regression with keras

#importing packages
import numpy as np
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense
from sklearn import datasets
from sklearn.model_selection import train_test_split

# Load the sample dataset
dataset = datasets.load_iris()
X = dataset.data
y = dataset.target

# Convert the target variable to categorical
y = np_utils.to_categorical(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Define the model
model = Sequential()
#hidden layers (2)
model.add(Dense(10, activation='softmax', input_shape=(X_train.shape[1],)))
model.add(Dense(3, activation='softmax'))

#compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Fit the model to the data
model.fit(X_train, y_train, epochs=45, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model on the test data
test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test accuracy:', test_acc*100)

-----------------------------------------------------------------------------------------------------------------------------------------------------

3. classification mlp

#import packages
from tensorflow import keras
from keras.datasets import fashion_mnist
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.utils import to_categorical
(x_train,y_train),(x_test,y_test)=fashion_mnist.load_data()#separating test and training data
x_train.shape
# Preprocess the data
x_train = x_train.reshape(-1, 784) / 255.0
x_test = x_test.reshape(-1, 784) / 255.0
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)
import matplotlib.pyplot as plt
# creating the model
model = Sequential()
model.add(Flatten(input_shape=(784,)))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(16, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))
# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history=model.fit(x_train,y_train,epochs=20)
plt.plot(history.history["loss"])
plt.plot(history.history["accuracy"])#plotting accuracy
y_prob=model.predict(x_test)
y_test=y_prob.argmax(axis=1)
y_test#getting result array

-----------------------------------------------------------------------------------------------------------------------------------------------------------

4. Regression Mlp

import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
data=pd.read_csv("/content/concrete_data.csv")
data
# Split the data into input and output variables
X = data.iloc[:,0:8]
Y = data.iloc[:,8]
# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.4, random_state=0)
# Define the model
model = Sequential()
model.add(Dense(16, input_dim=8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='linear'))
# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')
# Train the model
model.fit(X_train, Y_train, epochs=50, batch_size=10)
# Make predictions on the test set
Y_pred = model.predict(X_test)
# Evaluate the model
mse = mean_squared_error(Y_test, Y_pred)
print("Mean squared error: ", mse)



